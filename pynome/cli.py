"""This module contains the command line interface for Pynome.

.. module:: cli
    :platform: Unix
    :synopsis: This module contains the command line interface for
    Pynome.
"""

# General Python imports.
import click

# Inter-package imports.
from pynome.ensembldatabase import EnsemblDatabase
from pynome.assemblystorage import AssemblyStorage
from pynome.utils import read_json_config


@click.group()
@click.pass_context
def pynome(config, assembly_storage, ensembl_database):
    """
    This is the function which the command line invocation
    of pynome calls.

    The entry point to this command is created when program is installed
    with the setup.py file included.

    This function is run whenever a sub-command of it is called. Since
    all of these requre the database to be initialized, the code to do
    so is placed here.

    Read more in the click documentation:
    http://click.pocoo.org/5/commands/#callback-invocation
    """

    # Read the configuration file to get values for the databases.
    config = read_json_config()

    # Initialize the instance of AssemblyStorage. Load either the variables
    # found in the configuration files, or `None` which will cause Pynome to
    # use the directory it was launched from to save files.
    assembly_storage = AssemblyStorage(
        sqlite_path=config["storage_config"]["sqlite_path"] or None,
        base_path=config["storage_config"]["base_path"] or None,
        irods_base_path=config["storage_config"]["irods_base_path"] or None,
    )

    # Initialize the databases.
    ensembl_database = EnsemblDatabase(
        # Required values.
        name=config['ensembl_config']['name'],
        url=config['ensembl_config']['url'],
        description=config['ensembl_config']['description'],
        ignored_dirs=config['ensembl_config']['ignored_dirs'],
        data_types=config['ensembl_config']['data_types'],
        ftp_url=config['ensembl_config']['ftp_url'],
        kingdoms=config['ensembl_config']['kingdoms'],
        release_version=config['ensembl_config']['release_version'],
        bad_filenames=config['ensembl_config']['bad_filenames'],
    )

    # Add the ensembl_database to the source list of assembly_storage.
    assembly_storage.sources.append(ensembl_database)


# Since it is bad form to redefine Python primatives, pass the
# `name` argument to the click command decorator, this prevents us
# from having to write `def list():`.
@pynome.command(name='list')
@click.pass_context
def list_assemblies(assembly_storage):
    """List assemblies."""
    click.echo(a for a in assembly_storage.query_local_assemblies())


@pynome.command()
@click.pass_context
def download(config, assembly_storage, ensembl_database):
    """Download assembly files."""
    # TODO: Break this up (better develop the assembly storage api) for
    # more than one genome source. For now this only handles ensembl.

    # Get a list of all asemblies in the database..
    assemblies = assembly_storage.query_local_assemblies()

    # Download these found genome files.
    ensembl_database.download(
        assemblies=assemblies,
        base_path=config["storage_config"]["base_path"] or None
    )


@pynome.command()
@click.pass_context
def prepare(assembly_storage):
    """Prepare the downloaded files for further use."""

    for a in assembly_storage.query_local_assemblies():
        assembly_storage.decompress(a)
        assembly_storage.hisat_index(a)
        assembly_storage.gtf(a)
        assembly_storage.splice_site(a)


@pynome.command()
def push_irods():
    """Push all of the local genome files to an iRODs server."""
    # TODO: Look up irods pyton API to implement this function.
    pass


@pynome.command()
@click.pass_context
def discover(config, assembly_storage, ensembl_database):
    """Discover new genomes from a given source. If 'crawl_urls' are given
    in the configuration file, these will be used in place of any automatically
    generated urls."""

    # Tell the user the crawl is starting, and what urls are to be examined.
    click.echo('Crawl of the Ensembl FTP server starting...')
    url_str = config['ensembl_config']['crawl_urls'] or ensembl_database.top_dirs
    url_str = '\n'.join(url_str)
    click.echo(f'Begining a crawl at the following URIs: {url_str}')

    # Download the metadata file.
    click.echo('Downloading metadata file...')
    ensembl_database.download_metadata()

    # Crawl ensembl with either the given url list, or the autogenerated
    # complete list generated based on the config file.
    click.echo('Begining the main crawl...')
    ensembl_database.crawl(config['ensembl_config']['crawl_urls'] or None)

    # Get a list of all asemblies found by the crawl.
    assemblies = assembly_storage.query_local_assemblies()
    click.echo('Crawl completed. Found {len(assemblies)} assemblies.')

    # Search for matching taxonomy IDs within the species.txt metadata file,
    # and update the assemblies with that information.
    click.echo('Mapping taxonomy id numbers to discovered assemblies.')
    tax_id_update = ensembl_database.add_taxonomy_ids(assemblies)

    # Save (update) each of these assembly ids.
    for pk, update_dict in tax_id_update:
        assembly_storage.update_assembly(pk, update_dict)

    # Report back to the user.
    click.echo('Discovery complete.')
